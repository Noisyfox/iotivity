##
# Make sure Android NDK exists
# Note this script is only called if ANDROID_NDK was not set to begin with,
# so we can safely set it here.

import os
import sys

Import('env')

NDK_VER = 'r10e'

ndk_dir = 'android-ndk-' + NDK_VER
ndk_url_base = 'http://dl.google.com/android/ndk/android-ndk-' + NDK_VER
host_os = sys.platform

if host_os.startswith('linux'):
    ndk_url = ndk_url_base + '-linux-x86_64.bin'
    ndk_bundle = 'android-ndk-' + NDK_VER + '.bin'
elif host_os == 'darwin':
    ndk_url = ndk_url_base + '-darwin-x86_64.zip'
    ndk_bundle = 'android-ndk-' + NDK_VER + '.zip'
else:
    # Detect if it's a 64 bit windows. The code below
    # should get the arch of the running windows regardless
    # of python interpreter version & arch.

    # Check if current interpreter is running in 64bits
    is_64bits = sys.maxsize > 2**32

    if not is_64bits:
        # Check if running in wow64 mode
        import ctypes
        isWow64 = ctypes.c_bool()
        handle = ctypes.windll.kernel32.GetCurrentProcess() # should be -1, because the current process is currently defined as (HANDLE) -1
        success = ctypes.windll.kernel32.IsWow64Process(handle, ctypes.byref(isWow64)) # should return 1

        # A 32bits interpreter running in wow64 mode means it's running on a 64bits windows.
        is_64bits = (success and isWow64).value
    
    if is_64bits:
        ndk_url = ndk_url_base + '-windows-x86_64.exe'
    else:
        ndk_url = ndk_url_base + '-windows-x86.exe'
    ndk_bundle = 'android-ndk-' + NDK_VER + '.exe'

ndk_path = os.path.join(Dir('.').abspath, ndk_dir)
if not os.path.exists(ndk_path):
    if not os.path.exists(ndk_bundle):
        print("Retrieving Android NDK bundle")
        env.Download(ndk_bundle, ndk_url)
    print("Unpacking Android NDK bundle")
    if host_os.startswith('linux'):
        # scons on Jenkins/android builder does not take 'a+x' mode, use octal
        Execute(Chmod(ndk_bundle, 0o755))
        if Execute("./" + ndk_bundle):
            Exit("Unpack %s failed" % ndk_bundle)
    elif host_os == 'darwin':
        env.UnpackAll(ndk_dir, ndk_bundle)
    else:
        if Execute(ndk_bundle):
            Exit("Unpack %s failed" % ndk_bundle)

# export the location of the NDK
env.Replace(ANDROID_NDK=ndk_path)
